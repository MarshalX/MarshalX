{"componentChunkName":"component---src-templates-post-jsx","path":"/blog/post/dependency-injection-v-servisah-bota","result":{"data":{"prismicPost":{"id":"Prismic__Post__XokxTRAAAHB3rbnJ","uid":"dependency-injection-v-servisah-bota","first_publication_date":"2020-04-05T01:16:00+0000","last_publication_date":"2020-04-05T01:16:00+0000","data":{"title":{"text":"Dependency Injection в сервисах бота"},"description":"Вооопрооос, если я хочу несколько синглтон классов и не хочу дублировать get_instance в каждом из нём, то как обобщить? \n\nЕсли вынести выше и унаследоваться, то каждый класс будет юзать один экземляр родителя и будет полная белеберда. У всех будет доступ к инстансу обобщённого класса-родителя, а не текущего класса","date":"04.01.2020","categories":[{"category":{"document":[{"id":"Prismic__Category__Xm4I9BEAACMABh0C","uid":"pro-python","data":{"name":"Про Python"}}]}}],"body":[{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__XokxTRAAAHB3rbnJ__body__0","primary":{"text":{"html":"<p>И тут я понял, что не шарю вообще за ООП, особенно в питоне. Или спать уже хочу. Кооороооочеее</p><p>Хочу замутить несколько синглтон классов (3). Возьмем изи пример:</p>"}}},{"__typename":"PrismicPostBodyCodeBlock","slice_type":"code_block","id":"Prismic__PostBodyCodeBlock__Prismic__Post__XokxTRAAAHB3rbnJ__body__1","primary":{"code_block":{"html":"<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">:</span>\n    __singleton <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_instance</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> cls<span class=\"token punctuation\">.</span>__singleton <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>__singleton\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> RuntimeError<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>cls<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\"> not initialized'</span></span><span class=\"token punctuation\">)</span></code></pre>"}}},{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__XokxTRAAAHB3rbnJ__body__2","primary":{"text":{"html":"<p>Вооопрооос, если я хочу несколько синглтон классов и не хочу дублировать <code class=\"language-text\">get_instance</code> в каждом из нём, то как обобщить? </p><p>Если вынести выше и унаследоваться, то каждый класс будет юзать один экземляр родителя и будет полная белеберда. У всех будет доступ к инстансу обобщённого класса-родителя, а не текущего класса</p><p>UPD. Офигенно объяснил. Короче поле <code class=\"language-text\">__singleton</code> будет иметь общее значение у всех классов, что унаследовались от <em>Singleton</em></p><p>UPD2. Ну точнее как, <code class=\"language-text\">get_instance</code> будет возвращать общее поле <strong>родителя</strong>, а не текущего класса. А как сделать так, чтоб с текущего класса( не хооочууу в каждом классе <code class=\"language-text\">get_instance</code> иметь(</p>"}}},{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__XokxTRAAAHB3rbnJ__body__3","primary":{"text":{"html":"<p>Что-то я уснул по щелку пальцев без задней мысли об этом, утром начали приходить нотификейты, разбудившие меня. Увлекательно предисловие. </p><p>Это мне писали &quot;нафига тебе аж 3 синглтона?&quot;.</p><p>Мне что-то в голову ударило, что создать класс и там в полях инициализировать свои сервисы (которые я хотел переделать на синглтон) и потом шарить один экземляр этого класса с сервисами на всё приложение не оч хорошо.</p>"}}},{"__typename":"PrismicPostBodyCodeBlock","slice_type":"code_block","id":"Prismic__PostBodyCodeBlock__Prismic__Post__XokxTRAAAHB3rbnJ__body__4","primary":{"code_block":{"html":"<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>track_watcher<span class=\"token operator\">=</span>TrackWatcher<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>track_watcher <span class=\"token operator\">=</span> track_watcher\n\nservices <span class=\"token operator\">=</span> Services<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>"}}},{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__XokxTRAAAHB3rbnJ__body__5","primary":{"text":{"html":"<p>А  потом где надо</p>"}}},{"__typename":"PrismicPostBodyCodeBlock","slice_type":"code_block","id":"Prismic__PostBodyCodeBlock__Prismic__Post__XokxTRAAAHB3rbnJ__body__6","primary":{"code_block":{"html":"<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> services <span class=\"token keyword\">import</span> services\nservices<span class=\"token punctuation\">.</span>track_watcher<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> track<span class=\"token punctuation\">)</span></code></pre>"}}},{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__XokxTRAAAHB3rbnJ__body__7","primary":{"text":{"html":"<p>Когда мне сказали, что это <em>Dependency injection</em> - я ушёл гуглить. То, что нагуглил, вроде подходит под моё. Можно не переписывать ✨</p><p>Надо доразобраться с <em>DI</em></p><p>UPD. Собсна видос покрывает чуть ли не всё, что надо знать.</p><p><a  href=\"https://www.youtube.com/watch?v=Hm2fTv9wikI\">Dependency Injection -  Jakob Jenkov</a></p><p>Пока без понятия как более правильно такое делать в питоне и делают ли. Вон кто-то аж либу юзает: <a  href=\"https://pypi.org/project/Inject/\">Inject - PyPi</a>, которая в своём описании &quot;тонко&quot; намекает the python way, the good way</p>"}}}]}},"posts":{"nodes":[{"id":"Prismic__Post__ZYgWYhAAACYAKMp2","uid":"2023","data":{"title":{"text":"Итоги Года 2023"},"date":"31.12.2023","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}},{"id":"Prismic__Post__Y62KDBAAACYAwfBO","uid":"2022","data":{"title":{"text":"Итоги Года 2022"},"date":"31.12.2022","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}},{"id":"Prismic__Post__Y639RhAAACMAwpTU","uid":"2021","data":{"title":{"text":"Итоги Года 2021"},"date":"31.12.2021","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}},{"id":"Prismic__Post__Y64jWxAAACQAwssK","uid":"2020","data":{"title":{"text":"Итоги Года 2020"},"date":"31.12.2020","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}}]}},"pageContext":{"uid":"dependency-injection-v-servisah-bota"}}}