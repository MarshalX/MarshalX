{"componentChunkName":"component---src-templates-post-jsx","path":"/blog/post/pep-622","result":{"data":{"prismicPost":{"id":"Prismic__Post__X4GpShIAACQAINw7","uid":"pep-622","first_publication_date":"2020-10-10T12:31:19+0000","last_publication_date":"2020-10-10T12:31:19+0000","data":{"title":{"text":"PEP-622"},"description":"Пока все хайпят на видеозвонках и анимированных аватарках в Telegram beta, давайте взглянем на PEP 622 от 23 числа (вчера)!","date":"23.06.2020","categories":[{"category":{"document":[{"id":"Prismic__Category__Xm4I9BEAACMABh0C","uid":"pro-python","data":{"name":"Про Python"}}]}}],"body":[{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__X4GpShIAACQAINw7__body__0","primary":{"text":{"html":"<p>Предлагается добавить операторы для реализации паттерна <a  href=\"https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BF%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D1%81_%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D1%86%D0%BE%D0%BC\">сопоставления с образцом</a>. Необходимо это для того, чтобы упростить взаимодействие с разнородными данными и не городить <code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">elif</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code> вместе с вечной проверкой на <code class=\"language-python\"><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code>. Наши методы/функции очень часто принимают в свои аргументы разные типы данных и данный <em>math</em> нам упростит реализации.</p><p>Вот как это будет выглядеть:</p>"}}},{"__typename":"PrismicPostBodyCodeBlock","slice_type":"code_block","id":"Prismic__PostBodyCodeBlock__Prismic__Post__X4GpShIAACQAINw7__body__1","primary":{"code_block":{"html":"<pre class=\"language-python\"><code class=\"language-python\">match some_expression<span class=\"token punctuation\">:</span>\n    case pattern_1<span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    case pattern_2<span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>"}}},{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__X4GpShIAACQAINw7__body__2","primary":{"text":{"html":"<p>Суть в том, что мы проходимся по нашему списку паттернов, если где-то ему соответствуем - заходим внутрь и выполняем перечень операторов. На другие паттерны мы больше не смотрим! Если подходящего паттерна нет, то ничего не происходит и выполняется код ниже самого <em>match</em>.</p><p>Никаких поведений по умолчанию нет, но их можно задать самостоятельно (пустой name pattern &quot;&quot;).</p><p>Предлагаются следующие типы паттернов: <em>name</em>, <em>literal</em>, <em>constant</em>, <em>group</em>, <em>sequence</em>, <em>mapping</em>, <em>class</em>. Отдельным паттерном является <em>guards</em>.</p><p>Большинство понятно из названий. Тут вам и <code class=\"language-python\">case <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></code> и <code class=\"language-python\">case name</code>, где name аттрибут объекта и выходит как замена <code class=\"language-python\"><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> с пробрасыванием значения внутрь</p>"}}},{"__typename":"PrismicPostBodyCodeBlock","slice_type":"code_block","id":"Prismic__PostBodyCodeBlock__Prismic__Post__X4GpShIAACQAINw7__body__3","primary":{"code_block":{"html":"<pre class=\"language-python\"><code class=\"language-python\">match greeting<span class=\"token punctuation\">:</span>\n    case name<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Hi </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">!\"</span></span><span class=\"token punctuation\">)</span>\n</code></pre>"}}},{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__X4GpShIAACQAINw7__body__4","primary":{"text":{"html":"<p>И по константам с <em>Enum</em> с всякими логическими &quot;или&quot; через | (да-да, не через <em>or</em>). Ну и классы конечно же, который имеют новый <em>magic method</em>, стандартная реализация которого следующая:</p>"}}},{"__typename":"PrismicPostBodyCodeBlock","slice_type":"code_block","id":"Prismic__PostBodyCodeBlock__Prismic__Post__X4GpShIAACQAINw7__body__5","primary":{"code_block":{"html":"<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__match__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> instance\n</code></pre>"}}},{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__X4GpShIAACQAINw7__body__6","primary":{"text":{"html":"<p>Стоит отметить отдельный от всех паттерн <strong>Guard</strong>. Он позволяет писать условные выражения внутри case, например:</p>"}}},{"__typename":"PrismicPostBodyCodeBlock","slice_type":"code_block","id":"Prismic__PostBodyCodeBlock__Prismic__Post__X4GpShIAACQAINw7__body__7","primary":{"code_block":{"html":"<pre class=\"language-python\"><code class=\"language-python\">match <span class=\"token builtin\">input</span><span class=\"token punctuation\">:</span>\n    case <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> MAX_INT <span class=\"token keyword\">and</span> y <span class=\"token operator\">></span> MAX_INT<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got a pair of large numbers\"</span><span class=\"token punctuation\">)</span></code></pre>"}}},{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__X4GpShIAACQAINw7__body__8","primary":{"text":{"html":"<p>Больше подробностей по другим паттернам и примерам вы найдете <a  href=\"https://www.python.org/dev/peps/pep-0622/\">в самом<em> PEP&#39;e</em></a>, а теперь несколько интересных фактов:</p><ol><li>Данный <em>PEP</em> полностью обратно совместим так как новые ключевые слова (<em>match</em>, <em>case</em>) остаются как<em> soft keywords</em>, а это значит, что их можно продолжать использовать как имена переменных!</li><li>Литералы с плавающей точкой не запретили, несмотря на их неточность.</li><li>Ренджи аля <code class=\"language-python\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token number\">.6</span></code> не добавят, потому что возникает куча вопросов. Один из которых про рендж <code class=\"language-python\"><span class=\"token string\">'a'</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token string\">'z'</span></code>, но в <em>Python</em> нет символьного типа, только <em>string</em>, а следовательно это невозможно.</li><li>Контролировать как-то поведение прохождения по паттернам с помощью continue и break не будет доступно. Строго только та логика, что описана в самом начале данного поста. Потому что, например, если match находится внутри цикла, то понимаете что будет...  </li><li>Несмотря на наличие оператора | (<em>or</em>) оператор &amp; (<em>and</em>) отсутствует. Предлагается использовать <strong>Guards</strong>.</li><li>Использовать !<em> </em>как <em>not</em> нельзя.</li><li>Тайпхинтинг (аннотации типов) не будет доступен вместе с этими паттернами из-за огромного количества возникающих проблем ✨</li></ol>"}}}]}},"posts":{"nodes":[{"id":"Prismic__Post__ZYgWYhAAACYAKMp2","uid":"2023","data":{"title":{"text":"Итоги Года 2023"},"date":"31.12.2023","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}},{"id":"Prismic__Post__Y62KDBAAACYAwfBO","uid":"2022","data":{"title":{"text":"Итоги Года 2022"},"date":"31.12.2022","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}},{"id":"Prismic__Post__Y639RhAAACMAwpTU","uid":"2021","data":{"title":{"text":"Итоги Года 2021"},"date":"31.12.2021","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}},{"id":"Prismic__Post__Y64jWxAAACQAwssK","uid":"2020","data":{"title":{"text":"Итоги Года 2020"},"date":"31.12.2020","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}}]}},"pageContext":{"uid":"pep-622"}}}