{"componentChunkName":"component---src-templates-post-jsx","path":"/blog/post/vstroennye-tipy-v-python-i-interesnye-momenty","result":{"data":{"prismicPost":{"id":"Prismic__Post__Xm53BBEAACIACAaW","uid":"vstroennye-tipy-v-python-i-interesnye-momenty","first_publication_date":"2020-03-15T18:42:14+0000","last_publication_date":"2020-03-15T18:51:42+0000","data":{"title":{"text":"Встроенные типы в Python и интересные моменты"},"description":"Иногда на собеседованиях просят просто перечислить встроенные типы. Из стандатрных пакетов библиотеки тоже любят спросить.\nint, float, bool, str. Очень интересно, ага, да. Или правда интересно?\nПройдёмся по основным встроенным типам найдя в них интересные особенности и откопав для себя что-то новое!","date":"27.02.2020","categories":[{"category":{"document":[{"id":"Prismic__Category__Xm4I9BEAACMABh0C","uid":"pro-python","data":{"name":"Про Python"}}]}}],"body":[{"__typename":"PrismicPostBodyQuote","slice_type":"quote","id":"Prismic__PostBodyQuote__Prismic__Post__Xm53BBEAACIACAaW__body__0","primary":{"quote":{"html":"<p>Перечислите и скажите пару слов об известных Вам встроенных типах данных. В конце можете перичислить из стандатрных пакетов.</p>","text":"Перечислите и скажите пару слов об известных Вам встроенных типах данных. В конце можете перичислить из стандатрных пакетов."}}},{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__Xm53BBEAACIACAaW__body__1","primary":{"text":{"html":"<p><em>int</em>, <em>float</em>, <em>bool</em>, <em>str</em>. Очень интересно, ага, да. Или рил интересно?</p><h3>Целые числа</h3><p>У интов есть методы, ведь у нас тут всё классы. Поэтому можно так: <code class=\"language-python\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>bit_lenght<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code>, а ещё <code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>to<span class=\"token operator\">/</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span>_bytes</code>. Больше интересного нет.</p><h3>Числа с плавающей точкой</h3><p>Класс <em>float</em> - имплементация абстрактного класса <em>Real</em>. Тоже есть методы, например, такой классный как<em> .is_integer()</em> и <em>.hex()</em></p><p>Если в комплексном нам нужна<em> j</em> в конце для обозначения, то тут точка. </p>"}}},{"__typename":"PrismicPostBodyCodeBlock","slice_type":"code_block","id":"Prismic__PostBodyCodeBlock__Prismic__Post__Xm53BBEAACIACAaW__body__2","primary":{"code_block":{"html":"<pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span></code></pre>"}}},{"__typename":"PrismicPostBodyText","slice_type":"text","id":"Prismic__PostBodyText__Prismic__Post__Xm53BBEAACIACAaW__body__3","primary":{"text":{"html":"<h3><strong>Комплексные числа</strong></h3><p><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">27j</span></code> - тип <em>complex</em> (даа, <em>j</em> в конце).</p><p>Модуль <em>math</em> при <code class=\"language-python\">sqrt<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code><em> </em>выдаст исключение, а модуль <em>cmath</em> - комплексное число.</p><h3>Типы последовательностей: list, tuple, range</h3><p><strong>List</strong> мутабельный, можно объявить как <em>[]</em>. Доступен конструктор<em> list()</em>, можно использовать списковое включение (о нем потом).</p><p><strong>Tuples</strong> - кортежи не мутируются. Объявляются как <em>()</em>, конструктор <em>tuples()</em>. Есть один маленький рофл, который не всем заходит.</p><p><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></code></p><p><code class=\"language-python\"><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></code><em> - tuple</em></p><p><code class=\"language-python\"><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span></code><em> - int</em></p><p>Т.е. кортеж не обязательно должен объявляться через круглые скобки. Мы бывает юзаем кортежи в возврате методов и там просто перечисляем что вернуть через запятую. Понятное дело, такое работает не везде. Если мы хотим передать кортеж в арги, то обязательно используем скобки:</p><p><code class=\"language-python\">foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></p><p><strong>Ranges</strong> - не мутируются. Исключительно конструктором передаём минимум один арг - <em>stop</em>. <code class=\"language-python\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span></code>. В памяти только три арга и хранит.</p><h3>Строки</h3><p>Без лишних комментариев. Объявляем <code class=\"language-python\">‘tak’</code>, <code class=\"language-python\">“tak”</code>, <code class=\"language-python\">‘’’tak’’’</code> и <code class=\"language-python\">“””tak”””</code></p><p>Для строк у нас есть еще обозначения перед ними:</p><ul><li>r - raw string - игнорим бэкслеш;</li><li>b - бинарные</li><li>f - строки для форматирования.</li></ul><h3>Типы бинарных последовательностей</h3><p><code class=\"language-python\"><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code>, <code class=\"language-python\"><span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code>, <code class=\"language-python\"><span class=\"token builtin\">memoryview</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></p><p>Для всех типов-последовтаельностей доступны такие фичи как in, например (<code class=\"language-python\">a <span class=\"token keyword\">in</span> b</code>, где <em>b</em> - последовательность)</p><h3>Типы множеств</h3><p>Коллекция без порядка. Недопустимы дубликаты в элементах.</p><p><em>Set</em> - мутабельный, <em>frozenset</em> - нет (можно получить хэш).</p><h3>Тип словарь</h3><p><code class=\"language-python\"><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> - мутабельный.</p><p><code class=\"language-python\"><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> - ключи, <code class=\"language-python\"><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> - значения, <code class=\"language-python\"><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><em> </em>пары (ключ, значение)</p><p></p><p>Да, есть ещё встроенные типы, но вверху основные представители без уж ну самых скучных. </p><p>А теперь прост список типов из пакетов, ы:</p><p><strong>datetime</strong>: <em>timedelta</em>, <em>date</em>, <em>datetime</em>, <em>time</em>, <em>timezone</em>, <em>tzinfo</em>.</p><p><strong>collections</strong>: <em>Counter</em>, <em>deque</em>, <em>defaultdict</em>, <em>OrderedDict</em>, <em>namedtuple</em> </p><p>И ещё много-много всего, но мы ведь хотим успеть и на другие вопросы на собесе ответить.</p>"}}}]}},"posts":{"nodes":[{"id":"Prismic__Post__ZYgWYhAAACYAKMp2","uid":"2023","data":{"title":{"text":"Итоги Года 2023"},"date":"31.12.2023","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}},{"id":"Prismic__Post__Y62KDBAAACYAwfBO","uid":"2022","data":{"title":{"text":"Итоги Года 2022"},"date":"31.12.2022","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}},{"id":"Prismic__Post__Y639RhAAACMAwpTU","uid":"2021","data":{"title":{"text":"Итоги Года 2021"},"date":"31.12.2021","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}},{"id":"Prismic__Post__Y64jWxAAACQAwssK","uid":"2020","data":{"title":{"text":"Итоги Года 2020"},"date":"31.12.2020","categories":[{"category":{"document":[{"id":"Prismic__Category__Y635ZxAAACQAwo9V","uid":"results-of-the-year","data":{"name":"Итоги Года"}}]}}]}}]}},"pageContext":{"uid":"vstroennye-tipy-v-python-i-interesnye-momenty"}}}